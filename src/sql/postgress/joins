--@Author GT
--Create a table PostgressSQL insert data and perform queries
--Date 10/11/2020

CREATE TABLE friends
(
  friend_id INT,
  friend_name VARCHAR(100)
);
CREATE TABLE pets
(
 pet_id INT,
 owner_id INT,
 pet_type VARCHAR(100),
 pet_name VARCHAR(100)
);
INSERT INTO friends values(1, 'John');
INSERT INTO friends values(2, 'Sarah');
INSERT INTO friends values(3, 'Rachel');
INSERT INTO friends values(4, 'Sam');
INSERT INTO pets values(1, 1,    'goldfish',   'Fishy'    );
INSERT INTO pets values(2, 1,    'goldfish',   'Nemo'     );
INSERT INTO pets values(3, 1,    'dog',        'Fido'     );
INSERT INTO pets values(4, 2,    'cat',        'Kitty'    );
INSERT INTO pets values(5, 2,    'bird',       'Feathers' );
INSERT INTO pets values(6, 3,    'chinchilla', 'Fuzzy'    );
INSERT INTO pets values(7, NULL, 'iguana',     'Scales'   );

select * from pets;

select * from friends;

select friends from friends;
select friends from friends;
select pets from pets;
select count(*) from friends;

select count(pets)
from pets;
-- Inner join
select * from friends
inner join pets
on friends.friend_id = pets.owner_id;

----Implicit joins

select * from friends, pets
where friends.friend_id = pets.owner_id;

--Outer joins,left outer join
select * from friends
left outer join pets
on friends.friend_id = pets.owner_id;

--Outer joins,right outer join
select * from friends
right outer join pets
on friends.friend_id = pets.owner_id;

--full outer join

select * from friends
full outer join pets
on friends.friend_id = pets.owner_id;

-- cross join
--cross joins produce a result set in which the number rows
--in the first table multiplied by the number of the rows in the second table
select * from friends
cross join pets;

